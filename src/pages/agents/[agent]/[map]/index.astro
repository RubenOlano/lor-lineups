---
import { getCollection } from "astro:content";
import BaseLayout from "@/layouts/BaseLayout.astro";
import SetupGridItem from "@/components/SetupGridItem.astro";
import MapSearch from "@/components/MapSearch.astro";
import { agentMap } from "@/util/agents";
import { mapMap } from "@/util/maps";

export async function getStaticPaths() {
	const entries = await getCollection("setup");
	const uniqueAgents = Object.keys(agentMap);
	const uniqueMaps = Object.keys(mapMap);
	return uniqueAgents
		.map((agent) => {
			return uniqueMaps.map((map) => {
				const filteredSetups = entries.filter(
					(entry) =>
						entry.data.agent.toLowerCase() === agent.toLowerCase() &&
						entry.data.map.toLowerCase() === map.toLowerCase()
				);
				return {
					params: {
						agent: agent.toLowerCase(),
						map: map.toLowerCase(),
					},
					props: {
						setups: filteredSetups,
					},
				};
			});
		})
		.flat();
}
const { agent, map } = Astro.params;
const { setups } = Astro.props;

const capitlizedMap = map[0]!.toUpperCase() + map.slice(1);
const capitlizedAgent = agent[0]!.toUpperCase() + agent.slice(1);
const title = `Setups for ${capitlizedAgent} on ${capitlizedMap}`;
---

<BaseLayout {title}>
	<div class="max-w-7xl mx-auto p-4 md:p-8">
		<h1 class="text-4xl font-extrabold text-gray-900 mb-8 text-center">
			Setups for <span class="text-blue-500" transition:name={capitlizedAgent}
				>{capitlizedAgent}</span
			> on <span class="text-blue-500" transition:name={capitlizedMap}
				>{capitlizedMap}</span
			>
		</h1>

		<div class="mb-8">
			<MapSearch currentMap={map} />
		</div>

		{
			setups.length === 0 && (
				<p class="text-center text-gray-600">
					No setups found for
					{capitlizedAgent} on {capitlizedMap}.
				</p>
			)
		}
		<div class="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-4">
			{
				setups.map((setup) => (
					<SetupGridItem {...setup.data} slug={setup.slug} />
				))
			}
		</div>
	</div>
</BaseLayout>
