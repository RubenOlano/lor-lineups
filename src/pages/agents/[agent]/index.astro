---
import { getCollection } from "astro:content";
import BaseLayout from "@/layouts/BaseLayout.astro";
import SetupGridItem from "@/components/SetupGridItem.astro";
import MapSearch from "@/components/MapSearch.astro";
import { agentMap } from "@/util/agents";

export async function getStaticPaths() {
	const entries = await getCollection("setup");
	const uniqueAgents = Object.keys(agentMap);
	return uniqueAgents.map((agent) => {
		const filteredSetups = entries.filter(
			(entry) => entry.data.agent.toLowerCase() === agent.toLowerCase()
		);
		return {
			params: { agent: agent.toLowerCase() },
			props: { setups: filteredSetups },
		};
	});
}
const { agent } = Astro.params;
const { setups } = Astro.props;
const capitalizedAgent = agent[0]!.toUpperCase() + agent.slice(1);
const title = `Setups for ${capitalizedAgent}`;
---

<BaseLayout {title}>
	<div class="max-w-7xl mx-auto p-4 md:p-8">
		<h1
			class="text-4xl font-extrabold text-gray-900 mb-8 text-center"
			transition:name="header"
		>
			Setups for
			<span class="text-blue-500" transition:name={capitalizedAgent}>
				{capitalizedAgent}</span
			>
		</h1>
		<div class="mb-8">
			<MapSearch />
		</div>

		{
			setups.length === 0 && (
				<p class="text-center text-gray-600">
					No setups found for
					{capitalizedAgent}.
				</p>
			)
		}
		<div class="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-4">
			{
				setups.map((setup) => (
					<SetupGridItem {...setup.data} slug={setup.slug} />
				))
			}
		</div>
	</div>
</BaseLayout>
